THIS FILE STATES BUGS TO FIX AND FEATURES TO IMPLEMENT

TODO:
- fix rendering cutted tiles, which appear to be cutted improperly
- put back fog of war, ensure line of sight works properly
- Base placement cost.
- Base should be limited to only one operation per turn.
- Instead of actually revealing magic node terrain, draw unactivated nodes on map using crosses.
- move map into the top right corner, and rotate it into diamond to match map. Use fill the corner spaces with information about current cut-level, and X,Y coords.
- Loan mechanics, which allow player to borrow 1000 gold under 5% interest rate
- Tutorial dialogue for the first time player enters a site, explaining the rules.
- Pickable spells, that are chosen out of researched spells list. Defeauted enemy creatures could drop spells too.
- Economy:
    Initial gold: 4000
    Base cost: 2000
    Passive income (per world turn): 100
    Spell cost: 10 (more for higher tiers)
    Site turn cost (decremented from bounty gold): 10.
    Typical tier-1 unit cost: 100
    High tier-5 unit cost: 500
    Scout cost: 50
    Expected easy mission cost: 1000
    Mission bounty is a percent of gold based of enemy's allowance minus number of turns it took to complete the mission.
    Map could have treasures giving 100 gold each.
    Similar system was used in Warhammer and it was good enough.
    Each player unit's death should be penalized.
- AI should try to challenge player. If player brings too many undead, then AI should pick counter-undead units and enchancements.
- To eliminate hunt that last monster problem, when during several turns there are no encounters, AI should attack using some of its monster, targeting leader. Otherwise monster would patrol between spawn points.
- Instead of confusing charging mechanic, have concentrate action, which will boost will over the normally provided amount at the start of the turn. Yet unit sustaining a hit would still lose his concentration and his willpower would be put back to its normal maximum.
- Implement player avatar and color selection.
- gfx blitting can be greatly sped up by creating rle/offset_jump tables on fly, during type determination
- no need to load sprites for unseen units and tiles.
- is unit.size/sprite.size really required?
- save seed for site.variation
- There should be at least 36 basic parts for map to look non repeatable.
- Randomizable subarts inside 10x10 chunks
- In addition to `role`, tile should have `material` property, that way effects like fire could burn through wood.
- proper minimap colors.
- Consider faster movement rates, so player could traverse map faster.
- fix tall sprites popping through the ceiling and walls by cutting their bliting from top or bottom
- Think about using quadtrees for sprite partitioning. That would also optimize drawing of sprites containing a lot of empty space and possibly animations, that have static content.
- Autogeneration of incinerate and gibbed animations. For incinerate sprite first turns into ashes bottom up and then ash falls down.
- Implement reagents and spell systems, then a menu to manage them at the start of the battle.
- Make sure only reachable enemies will appear during the airship target selection phase.
- present new sites in sequence, so player wont be overwhelmed by ton of new info. Also play some attention gaining sounds, like base placement and raiding party appearance.
- Better door interactions, with creatures automatically locking and unlocking them.
- Move researach to world map. Player should be only able to research the creatures it has captured the essence of. To do that player must defeat that unit and investigate its corpse. There could be a spell that would protect target creatures from being scavenged, if player doesn't want enemy to gain knowledge of how to summon it. The spells on the other hand must be pre-selected by player, based on difficulty. Additional spells could be gained by spying. 
- Finish minimap implementation, it should show only the current level and reduce saturation for levels below
- Each spell should have tier, associated with difficulty level at which enemy wizard would be allowed to use it.
- Unit's height actually influencing its pathfinding.
- Proper flyers, that can get above other units (if there is space) and do hit and run tactics. Think about what happens if flyinh unit creates pentagram. Should it land first?
- Special attack sound and effect blessed/crused units.
- Change all control to left mouse button. Right would be used for cancelation. Swapping could be done be holding shift-key. Unit deselecting would be done with selecting that unit again.
  That should help porting to touch devices.
- Proper teleporation spell, requires introducing two point actions, probably can be implement using paired actions.
- begin implementing campaign
- Include recall to pentagram into AI's pathfinding.
- height advantage gives +1 to attack to melee units, and +2 to ranged units
- Casting time for some spells, including casting status icon and action animation for casting units. Caster could be interrupted, if attacked while casting.
- refactor some uses of add_effect into add_param
  should not use Params for effect's script
- rename moves to on_move, etc..
- `act` to `action` is like `class` to `unit`; Refactor it: rename `act` to tact, action to `act`, class to tunit
- Think about refactoring genes to use ECS system, where each unit has a list of systems acting on him. Like i.e. poison system and regen systems.
- AI should change vampire into bat form, before attack, and then back to vampire, when he is sees enemy and can attack
- store map events in a separate file
- 1-way portals, leading to situations where enemy can quickly attack player, while player has to find other way.
- traps
- unit width and height, limiting preventing it to move tiny paths.
- optimize resoure engine, so graphics and sounds would be loaded only when they are needed and deallocated when they are not required.
- At the end of AI turn, viewport focus should change to the place before AI turn.
- Move sound center to the middle of the screen (currently it is at the top).
- Proper player order logging for each turn, so game could be played online and player can review AI turn. Some uses would likely require copying world state.
- high enough initial map level, so we have place for deepth tree water and caves.
- flying mode for flyers, where only other flyers and ranged units can harm them. Such units fly two cells above ground, only where it is possible to do. That would also allow differentiating units into floaters, like ghost, and flyers, like dragon. Same way, climbers, like spider, should stick to the walls.
- tiling: incomplete tile column should take into account nearby tiles of the same type, instead of starting from zero.
- Better UI, maybe new-age/astrology themed, scrolls are not magical enough.

Bugs:
- vampire on low health turning into bat results in bat being invincible with 0 health (enemies cant attack it)
- when new map gets saved, folder browser should update content
- when height>>80, column tiles and units are not drawn
- hydra damages and poisons allied units++
- invisibility doesnt hide poison, bood and regen effects
- flying units can possibly crash pathfinder, when they are at very high tiles, being able to cross border. Insert a check against mad dimensions.
- blizzard projectiles have no gravity
- player can research enemy units
- adding and removing table from corner crashes the game, due to attempt to place outside of the map
- multicell units, like table, react badly when drawing tiles under them. disallow drawing at all
- `update_picked` and unit.picked should use different picking strucutre. current is error prone and had led to bugs previously
- projectiles hung up, when their sender dies

Sound:
- fix sound issues, where sounds are affected by height
- monster sound acks


UI:
- targeted units shouldn't blink
- add some description to tabs and menu tabs buttons
- unit profile and main menu options could be a tabs like all others
- a line from the portrait of current unit to its location on minimap
- better health indicators for selected units (use green dots - one per hit-point)
- in editor, placing unit on top of object should not be possible.
- simple way to temporarily transfer control to the AI, for map and AI testing.


Graphics:
- Grass cliff graphics should at least show a little bit of liff edge.
- New player colors: player{blue},king{purple},warlock{black},witch{red},
                     katzard{green},mime{orange},neutral{white}
- unit standing on a 1-height cell could obscure the unit below and behind it.
- icon for regen stat effect
- icon for dwarf's defend action
- icon for ghost's phase
- icon for devil's teleport
- dragon animation jumps horizontally during attack
- eye movement animation.
- finish house tileset, including floor and roof; dirt/plain should not align to house wall
- better flight animation (idle-anim for floating effect and cloud under unit); use wesnoth halo/saurian-magic-halo-*; monster-elemental_air could be useful too
- better detonate effect, neighboring units sent flying into the air, knocked back in all directions.
- better hasted unit animation (trail after hasted creature)
- power node should have round bottom, so it would look more natural on rough terrain or in flight.
- Better stones tileset. Current one don't really fit in.
- Automate shadow placement
- road object, which would block grass
- grass corner sprites, which would be auto placed onto dirt in corners between two grass tiles.
- design fullscreen graphics effects, like armageddon, snowstorm, fog and nighttime.
- dummy units, that would be left instead of real one, when fog of war takes place
- fog of war reveal animation
- particle system
- New tilesets: Snow, Lava, Swamp
- beetle movement frame gets cropped;
- beetle needs attack animation;

Optimization Possibilities:
- Optimize unit and action structure to take less space.
- use cell index directly instead of unit_goal wrapper
- when all four corners of object sprite are hidden, don't allow selecting it, also, dont draw it. requires probing pixels inside framebuffer
- fast way to determine height to the ceiling - that way we can have large creature wont be able to move into tiny hole. One way to do it is by using special tiles in place of empty or void tiles
- obstacles blocking sight, would require precomputed sight tree, where one blocked node would block sight to all children.
- when updating tiles, we can also mark doorways, so that flyers and jumpers could pick between multiple Z-levels
- mouse picking can be done in reverse on draw list

Symta Language Handicaps:
- `times` macro should have 2 argument form, when there is no need for a count var.
- do-while loop, to avoid needless `_label again`
- objects allocated on heap with autopointer cells.
- `Text.lines{}{...}` is a little confusing and verbose. Consider operator `.{}` for that.
- Operators `.><` and `.<>` as shorthands for skip and keep. Parens could be used for internal `<` and `>`: Skip .
- A some file, like common.s, that would be included by default into every other file. Such file would incldue common constants, like TILE_WIDTH.
- Stuff like `Tile.lay <= Tile.lay.tail` really needs some solution.
- Allow to specify name of the output executable file and entry point file, other than main. That way we can produce several executable files in the same dir from the same source code base. I.e. we could have sprite sheet dumper utility without touching the main game exe.
- The foremost handicap is the absence of proper enheap API and allocation syntax.
- `got@@it` leads to potential errors, because when `it` gets removed upstream, downstream references would be treated as literal symbols. It also introduces confusion.
- Don't use abort, because it involves windows debugger, that is pretty annoying.
- No way to quickly introduce an efficient inplace field on a struct, like unit, propagating it to save-file.
- No proper API for manually allocating types in shared memory.
